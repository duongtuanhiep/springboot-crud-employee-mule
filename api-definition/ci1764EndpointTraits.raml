#%RAML 1.0 Library
usage: |
  This library contains common traits for endpoints. The format for a trait is as follows: Every parameter-based trait for endpoints may only specify one single parameter. This parameter may have several comma-separated attributes in a specific order. This raises the readibility of an URL. Since Spring uses serveral parameters to do paging, an extra trait is defined to simply support this mechanism. However, where possible, use the standard <paged> mechanism.

traits:
  timedQueryable:
    description: |
      This trait definition describes the possibility to search time-based in a dataset. It is designed to be added to endpoints.
      It allows the definition of three parameters that describe a time-based interval.
      The format is as follows: "<from>,<to>,<by>" where <to> and <by> are optional, <from> is mandatory (if not given, a BAD_REQUEST is returned).
      
      from: The beginning of the time interval to query for (inclusive). Given in milliseconds from the epoch of 1970-01-01T00:00:00Z.
      to:    The end of the interval (exclusive). If not given, all entries later than the point in time that is specified by <from> are returned(that my include future data!). Given in milliseconds from the epoch of 1970-01-01T00:00:00Z.
      by:    Allows the specification of a property of the resource which is used for querying. The property MUST be a date or datetime property. If not set, the API uses an API-specific, predefined default value. Look into the API specification for details.
    usage: Add this trait to endpoints to make them queryable by time-based intervals.
    queryParameters: 
      timedQueryBy:
        type: string
        pattern: ^\d+(,\d+)?(,\w+)?$
        example: 12345678,90123456,lastChangedDate
        required: false
  springPaged:
    description: |
      Note: This trait is based on the fact, that Spring uses an inconsistent paging mechanism, where the paging definition is different to the sorting definition. Where possible, we follow the sorting definition format (see <<orderable>> trait). However, to prevent reimplementation of the paging mechanism in spring, we use this format for the time being.
      
      An endpoint with this trait must be called using a "Page" pattern. That means, the overall result of the endpoint is returned in chunks of a specific size (default: 10). This reduces the load on the database.
      Using the parameter <pageNumber> allows to get a specific chunk back.
    usage: Apply this to any endpoint that returns a large number of items.
    queryParameters: 
      pageNumber:
        description: The page number of the result-set to return.
        type: integer
        minimum: 0
        default: 0
      pageSize:
        description: The number of rows in a page request.
        type: integer
        default: 10
        maximum: 100
  paged:
    description: |
      An endpoint with this trait must be called using a "Page" pattern. That means, the overall result of the endpoint is returned in chunks of a specific size (default: 10). This reduces the load on the database.
      The parameter <pageBy> follows the pattern "<pageNumber>,<pageSize>". If not given, the default "0,10" is used.
      
      Please note, that it is not possible to get an unpaged result!
    usage: Apply this to any endpoint that returns a large number of items.
    queryParameters: 
      pageBy:
        type: string
        pattern: ^\d+,\d+$
        default: 0,10
        example: 10,256
        required: false
  orderable:
    description: |
      Order by any given attribute. Each API desides on its own which attributes it does support. Check the API-specific description.
      If the API specifies a default value for orderBy this attribute can be omitted.
    usage: Apply this to any method that produces results and requires (or wants to support) natural ordering.
    queryParameters: 
      orderBy:
        type: string
        pattern: ^\w+,(desc|asc)?$
        required: false
        default: key,asc
        example: surename,asc
